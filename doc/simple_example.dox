/*! \page simple_example
  A Simple Gunrock Example

  This code sample demonstrates a basic usage of Gunrock
  for finding the largest connected component of a graph,
  running BFS on this connected component and then
  computing betweenness centrality values on the GPU.

  \section codeWalkthrough Sample Code Walkthrough

  \dontinclude simple_example.cu
  
  This simple example shows you how to initialize graph
  primitive data structures, run the algorithm and extract
  results.

  \skip DeviceInit
  \until cudaSetDeviceFlags  

  The \c DeviceInit function will find the device which
  supports CUDA and initialize it.
  \c cudaSetDeviceFlags(cudaDeviceMapHost) will allow us to
  allocate pinned host memory that is accessible to the device.

  \skip g_undirected = true;
  \until }

  The following few lines will parse the command line
  arguments, here we set \c g_undirected to be true to imply
  that the input graph is undirected.

  \skip if (graph_type ==
  \until fflush(stdout);

  The current version of Gunrock only supports Matrix-market
  coordinate-formatted graph file. After we set the type info
  for the node identifier, the graph size and the value to
  compute. We declare an object \c csr of \c Csr<VertexId, Value, SizeT>.
  <a href=
"http://en.wikipedia.org/wiki/Sparse_matrix#Compressed_sparse_row_.28CSR_or_CRS.29">
  Compressed sparse row (CSR)</a> data structure is the primary
  data structure we use in this library.  We then use
  \c graphio::BuildMarketGraph to build  the graph data structure
  from file. In this example we suppose the graph has no edge
  weight. \c DisplayGraph function will display the graph as the
  CSR data structure.

  The main function in this example is \c RunTests(csr, args);

  \subsection RunTests RunTests Function

  \c RunTests starts by declaring problem type and functor types
  for a graph primitive. We want to compute connected component
  first.

  \dontinclude simple_example.cu

  \skip typedef CCProblem
  \until PtrJumpUnmaskFunctor;

  Then we allocate host-side array for reference check and GPU
  -computed results. We also need to initialize our problem
  enactor of \c CCEnactor type. The enactor object contains the
  enact function which has kernel entries for graph primitive
  kernel functions.

  \skip reference_component_ids
  \until CCEnactor

  In the next step, we create a pointer of \c CCProblem type and
  initialize it with CSR graph data on host. The problem object
  will hold data on device for each graph primitive in Gunrock
  library.

  \skip CCProblem_T *cc_problem
  \until exit(1);

  Before computing connected-component on GPU, we first run the
  \c RefCPUCC function to get the CPU reference result.

  \skip // Compute reference CPU CC solution
  \until }

  Now we can run our connected component primitive on GPU. To record
  kernel running time, simply define a \c gpu_timer of \c GpuTimer
  type. Note that we need to call the \c Reset function for each
  problem before the running of our GPU algorithm. We then call the
  enact function, and send all the fuctor types we need for this
  graph primitive to the function as template parameters.

  \skip // Perform CC
  \until gpu_timer.Stop

  After the connected component GPU function, we need to call
  \c Extract function to extract results from device memory. Then
  we can run some validation code, get the top 10 largest connected
  components and print their root node ids. We can set the source
  node for Breadth-First Search as the root of the largest connected
  component.
  
  \skip cc_problem->Extract
  \until src = cclist[0].root

  The final step of a graph primitive process is cleanup. Note we
  only need to delete the problem object, the destructor function
  will release the device memory for us. We finally call the
  \c cudaDeviceSynchronize to make sure the device has completed
  all preceding requested tasks. 

  \skip delete cc_problem
  \until cudaDeviceSync

  For Breadth-First Search primitive, the process is the same. We
  first declare the problem type and functor type for BFS.

  \skip bool MARK_PREDECESSORS
  \until BfsFunctor

  Then we allocate host-side array for reference check and GPU
  -computed results, initialize our problem enactor of
  \c BFSEnactor type, run CPU BFS reference algorithm, and load
  the enact function as we did in CC graph primitive.

  \skip reference_labels
  \until gpu_timer.ElapsedMillis

  The extracting, validation and cleanup code are also quite
  similar.

  \skip bfs_problem->Extract
  \until cudaDeviceSynchronize

  The third graph primitive we want to run is Brandes Betweenness
  Centrality. We first set the source node to -1 to inform the
  algorithm to compute the BC values for all nodes in the graph.
  The preparation steps are similar to the previous two primitives.
  In the actual computing process, we need to manually iterate over
  all the nodes in the graph. We design the BC primitive this way
  to provide more flexible use of BC value computing. For example,
  you can build your own approximate BC algorithm using this primitive.

  \skip i < end_src
  \until }
  \skipline }

  Note after the algorithm we need to call a scale kernel for
  normalization.

  \skipline MemsetScaleKernel

  The final step is the cleanup code for BC primitive.

  \skip delete bc_problem
  \until cudaDeviceSync
  
  We hope this can help you to integrate Gunrock into your project.

*/
