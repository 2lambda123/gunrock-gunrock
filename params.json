{"name":"Gunrock","tagline":"High-performance Graph Primitives on GPU","body":"Gunrock documentation\r\n=====================\r\n\r\nIntroduction\r\n============\r\n\r\nGunrock is a CUDA library for graph primitives that refactors,\r\nintegrates, and generalizes best-of-class GPU implementations\r\nof breadth-first search, connected components, and betweenness\r\ncentrality into a unified code base useful for future\r\ndevelopment of high-performance GPU graph primitives.\r\n\r\nHome Page\r\n---------\r\n\r\nHomepage for Gunrock: <http://gunrock.github.io/>\r\n\r\nGetting Started with Gunrock\r\n----------------------------\r\n\r\nFor information on building Gunrock, see [Building Gunrock](http://gunrock.github.io/gunrock/doc/0.1/building_gunrock.html).\r\n\r\nThe \"tests\" subdirectory included with Gunrock has a comprehensive test\r\napplication for all the functionality of Gunrock.\r\n\r\nFor the programming model we use in Gunrock, see [Programming Model](http://gunrock.github.io/gunrock/doc/0.1/programming_model.html).\r\n\r\nWe have also provided a code walkthrough of a [simple example](http://gunrock.github.io/gunrock/doc/0.1/simple_example.html).\r\n\r\nReporting Problems\r\n==================\r\n\r\nTo report Gunrock bugs or request features, please file an issue\r\ndirectly using [Github](https://github.com/gunrock/gunrock/issues).\r\n\r\n<!-- TODO: Algorithm Input Size Limitations -->\r\n\r\nOperating System Support and Requirements\r\n=========================================\r\n\r\nThis release (0.1) has only been tested on Linux Mint 15 (64-bit) with\r\nCUDA 5.5 installed. We expect Gunrock to build and run correctly on\r\nother 64-bit and 32-bit Linux distributions. The current release (0.1)\r\ndoes not support any other platforms.\r\n\r\nRequirements\r\n------------\r\n\r\nGunrock has not been tested with any CUDA version < 5.5.\r\n\r\nThe CPU validity code for connected component and betweenness\r\ncentrality uses Boost Graph Library v1.53.0.\r\n\r\nCUDA\r\n====\r\n\r\nGunrock is implemented in [CUDA C/C++](http://developer.nvidia.com/cuda).\r\nIt requires the CUDA Toolkit. Please see the NVIDIA\r\n[CUDA](http://developer.nvidia.com/cuda) homepage to download CUDA as well\r\nas the CUDA Programming Guide and CUDA SDK, which includes many CUDA code\r\nexamples.\r\n\r\nDesign Goals\r\n============\r\n\r\nGunrock aims to provide a core set of vertex-centric or edge-centric\r\noperators for solving graph related problems and use these\r\nparallel-friendly abstractions to improve programmer productivity\r\nwhile maintaining high performance.\r\n\r\nRoad Map\r\n========\r\n\r\n - Framework: The structure of the operator code in Gunrock may change\r\n   significantly during near-term future development. Generally we\r\n   want to find the right set of operators that can abstract most\r\n   graph primitives while delivering high performance.\r\n\r\n - Primitives: Our near-term goal is to implement direction-optimal\r\n   BFS (as described in *Direction-Optimizing Breadth-First Search*\r\n   ([DOI](http://dx.doi.org/10.1109/SC.2012.50)) by Scott Beamer,\r\n   Krste Asanovic and David Patterson) using the backward edge-mapping\r\n   operator in Gunrock. The long-term goal includes other basic graph\r\n   primitives such as single-source shortest path and minimal spanning\r\n   tree.\r\n\r\nCredits\r\n=======\r\n\r\nGunrock Developers\r\n------------------\r\n\r\n- [Yangzihao Wang](http://www.idav.ucdavis.edu/~yzhwang/), University of\r\n  California, Davis\r\n\r\n- Yuechao Pan, University of\r\n  California, Davis\r\n\r\n- [Yuduo Wu](http://www.ece.ucdavis.edu/~wyd855/), University of California, Davis\r\n\r\n- [John Owens](http://www.ece.ucdavis.edu/~jowens/), University of California,\r\n  Davis [general help]\r\n\r\nAcknowledgements\r\n----------------\r\n\r\nThanks to the following developers who contributed code: The\r\nconnected-component implementation was derived from code written by\r\nJyothish Soman, Kothapalli Kishore, and P. J. Narayanan and described\r\nin their IPDPSW '10 paper *A Fast GPU Algorithm for Graph\r\nConnectivity* ([DOI](http://dx.doi.org/10.1109/IPDPSW.2010.5470817)).\r\nThe breadth-first search implementation and many of the utility\r\nfunctions in Gunrock are derived from the\r\n[b40c](http://code.google.com/p/back40computing/) library of\r\n[Duane Merrill](https://sites.google.com/site/duanemerrill/). The\r\nalgorithm is described in his PPoPP '12 paper *Scalable GPU Graph\r\nTraversal* ([DOI](http://dx.doi.org/10.1145/2370036.2145832)). Thanks\r\nto Erich Elsen and Vishal Vaidyanathan from\r\n[Royal Caliber](http://www.royal-caliber.com/) for their discussion on\r\nlibrary development and the dataset auto-generating code.\r\n\r\nThis work was funded by the DARPA XDATA program under AFRL Contract\r\nFA8750-13-C-0002 and by NSF awards CCF-1017399 and OCI-1032859. Our\r\nXDATA principal investigator is Eric Whyne of\r\n[Data Tactics Corporation](http://www.data-tactics.com/) and our DARPA\r\nprogram manager is\r\n[Dr. Christopher White](http://www.darpa.mil/Our_Work/I2O/Personnel/Dr_Christopher_White.aspx).\r\n\r\nGunrock Copyright and Software License\r\n======================================\r\n\r\nGunrock is copyright The Regents of the University of\r\nCalifornia, 2013. The library, examples, and all source code are\r\nreleased under\r\n[Apache 2.0](http://www.apache.org/licenses/LICENSE-2.0).\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}